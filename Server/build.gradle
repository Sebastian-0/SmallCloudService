plugins {
    id 'java'
}

dependencies {
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "com.google.code.gson:gson:$gsonVersion" // Gson is no longer maintained, should be replaced by e.g. Moshi
    implementation "com.google.guava:guava:$guavaVersion"

    implementation "org.eclipse.jetty:jetty-server:$jettyVersion"
    implementation "org.eclipse.jetty:jetty-servlet:$jettyVersion"
    implementation "org.eclipse.jetty:jetty-servlets:$jettyVersion"
    implementation "org.glassfish.jersey.containers:jersey-container-servlet-core:$jerseyVersion"
    implementation "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion"
    implementation "org.glassfish.jersey.core:jersey-client:$jerseyVersion"

    testImplementation "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jetty:$jerseyVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed", "standardError"
    }

}

task copyToLib( type: Copy ) {
    into "$buildDir/libs/lib"
    from configurations.runtimeClasspath
}

task copyProcfile( type: Copy ) {
    into "$buildDir/libs"
    from "Procfile"
}

jar {
    manifest {
        attributes 'Main-Class':'cloudservice.CloudServer',
                'Class-Path': configurations.runtimeClasspath.files.collect { "lib/$it.name" }.join(' ')
    }
    dependsOn copyToLib, copyProcfile
}

task packageDistibution(type: Zip) {
    archiveFileName = "${project.name}-${project.version}.zip"
    destinationDirectory = file("$buildDir")

    from "$buildDir/libs"
}

build {
    dependsOn packageDistibution
}